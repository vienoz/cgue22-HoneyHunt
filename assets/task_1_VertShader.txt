#version 430 core

layout (location = 0) in vec3 position;
layout (location = 1) in vec3 normalsIn;
layout (location = 2) in vec2 uvIn;

out vec3 fragPos;
out vec3 normals;
out vec2 uv;

layout (location = 0)uniform mat4 model;
layout (location = 1)uniform mat4 view;
layout (location = 2)uniform mat4 proj;

void main(){
	fragPos = vec3(model * vec4 (position, 1.0f));  // fragment position in world space
	normals = mat3(transpose(inverse(model))) * normalsIn;   //das is viel besser 
	uv = uvIn;
	gl_Position =  proj * view * model * vec4(position, 1.0f); //last value is homogeneous coordinate w

}